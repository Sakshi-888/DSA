// Brute Force
// Time Complexity = 0(m+n)
// Space Complexity = 0(m+n)

class Solution
{
public:
    double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2)
    {
        int m = nums1.size();
        int n = nums2.size();
        vector<int> nums3(m + n);
        int i = 0, j = 0;
        int k = 0;

        while (i < m && j < n)
        {
            if (nums1[i] < nums2[j])
            {
                nums3[k++] = nums1[i++];
            }
            else
            {
                nums3[k++] = nums2[j++];
            }
        }

        while (i < m)
        {
            nums3[k++] = nums1[i++];
        }

        while (j < n)
        {
            nums3[k++] = nums2[j++];
        }

        int size = m + n;
        // if size of nums3 is odd
        if (size % 2 != 1)
        {
            return nums3[size / 2];
        }
        // if size of nums3 is even
        else
        {
            return double(nums3[size / 2] + nums3[(size / 2) - 1]) / 2.0;
        }
    }
};
